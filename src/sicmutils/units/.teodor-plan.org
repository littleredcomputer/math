#+TITLE: Plan: unit system

Sam: I expect we'll delete this file before considering merging. I'm using it to
keep some chaos control.

* OBJECTIVES
** Core feature parity with scmutils
- multiplication for number with units
- multiplication for symbolic expression with units
- pull in constants from scmutils
** "Do we have a nice Clojure API, or is this just copied Scheme?"
- Alternatives for ~(& 1 &meter)~ syntax?
* PLAN
** Get /SOMETHING/ hooked into sicmutils.generic/*
wat?

This would let us use generic multiplication calls. Enables writing higher level
tests, "more natural". Is this hard?
*** TODO Good place to start: encode some actual constants
What WithUnits functionality do we need to encode c? We're actually almost
there.

Note: scmutils keeps /all/ constants in units/constants.scm; not just physics
constants, but also unitless constants (pi, ...). We already have some unitless
constants in sicmutils.
* LOG
** 2020-12-29
*** ->symbolic progression
- [X] Change core SI Unit implementation to keep a list of base units as symbols
- [X] Hook into sicmutils symbolic computation for comparison and symbolic
  representation (as used in tests)
*** Hook Units into sicmutils.generic/*
???
*** Alternatives for next step
1. Encode a constant from scmutils
2. Build compatibility with ~sicmutils.value/Value~
*** Encode a constant from scmutils
1. where are the constants? How are they defined? How are they queried?

located at

  src/units/constants.scmu

#+begin_src
(define-constant ':pi "\\pi" "Pi"
  (* 4 (atan 1 1))
  &unitless)

(define-constant ':2pi "2\\pi" "2*Pi"
  (* 8 (atan 1 1))
  &unitless)

1 ]=> :pi
#| 3.141592653589793 |#

1 ]=> :2pi
#| 6.283185307179586 |#
#+end_src
**** Observations
- Leading with : is problematic for Clojure symbols
- scmutils has constant names with a slash in them, like ~:pi/2~. Namespacing problem.

.

- Does this actually not work, or is it just bad ergonomically?
- Consider asking in Clojurians.

I asked in Clojurians: https://clojurians.slack.com/archives/C03S1KBA2/p1609248390053200

CPP does this: https://www.quantstart.com/articles/Mathematical-Constants-in-C/
*** Constants Approach
1. put some contants in a constants namespace
2. normal Clojure values for now;
* ARCHIVE
** DONE Symbolic representation of Units and WithUnits
This lets us see what we're doing from the REPL
