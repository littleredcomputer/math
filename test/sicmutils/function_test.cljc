;
; Copyright © 2017 Colin Smith.
; This work is based on the Scmutils system of MIT/GNU Scheme:
; Copyright © 2002 Massachusetts Institute of Technology
;
; This is free software;  you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or (at
; your option) any later version.
;
; This software is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
; General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this code; if not, see <http://www.gnu.org/licenses/>.
;

(ns sicmutils.function-test
  (:require [clojure.test :refer [is deftest testing]]
            [same :refer [ish?]]
            [sicmutils.function :as f]
            [sicmutils.generic :as g]
            [sicmutils.value :as v]))

(def ^:private near (v/within 1.0e-6))

(deftest value-protocol-tests
  (testing "v/zero?")
  (testing "freeze"
    (is (= ['+ '- '* '/ 'modulo 'quotient 'remainder 'negative?]
           (map v/freeze [+ - * / mod quot rem neg?]))
        "Certain functions freeze to symbols")

    (is (= (map v/freeze [g/+ g/- g/* g//
                          g/modulo g/quotient g/remainder
                          g/negative?])
           (map v/freeze [+ - * / mod quot rem neg?]))
        "These freeze to the same symbols as their generic counterparts.")

    (let [f (fn [x] (* x x))]
      (is (= f (v/freeze f))
          "Unknown functions freeze to themselves"))))

#?(:cljs
   (deftest exposed-arities-test
     (is (= [1] (f/exposed-arities (fn [x] (* x x)))))
     (is (= [1 3] (f/exposed-arities (fn ([x] (* x x)) ([x y z] (+ x y))))))))

(deftest arities
  (is (= [:exactly 0] (f/arity (fn [] 42))))
  (is (= [:exactly 1] (f/arity (fn [x] (+ x 1)))))
  (is (= [:exactly 2] (f/arity (fn [x y] (+ x y)))))
  (is (= [:exactly 3] (f/arity (fn [x y z] (* x y z)))))
  (is (= [:at-least 0] (f/arity (fn [& xs] (reduce + 0 xs)))))
  (is (= [:at-least 1] (f/arity (fn [x & xs] (+ x (reduce * 1 xs))))))
  (is (= [:at-least 2] (f/arity (fn [x y & zs] (+ x y (reduce * 1 zs))))))
  (is (= [:exactly 0] (f/arity 'x)))
  (is (= [:at-least 0] (f/arity (constantly 42))))
  ;; the following is dubious until we attach arity metadata to MultiFns
  (is (= [:exactly 1] (f/arity [1 2 3])))
  (let [f (fn [x] (+ x x))
        g (fn [y] (* y y))]
    (is (= [:exactly 1] (f/arity (comp f g))))))

#?(:cljs
   (deftest arities-cljs
     ;; in cljs, we can figure out that a fn accepts some bounded number of
     ;; arguments.
     (is (= [:between 1 3] (f/arity (fn ([x] (inc x))
                                      ([x y] (+ x y))
                                      ([x y z] (* x y z))))))

     ;; Noting the case here where we're missing the arity-2, but we still
     ;; return a :between.
     (is (= [:between 1 3] (f/arity (fn ([x] (inc x)) ([x y z] (* x y z))))))

     ;; Adding a variadic triggers :at-least...
     (is (= [:at-least 1] (f/arity (fn ([x] (inc x)) ([x y z & xs] (* x y z))))))

     ;; Unless you add ALL arities from 0 to 3 and variadic. Then we assume you were
     ;; generated by comp.
     (is (= [:exactly 1] (f/arity (fn ([] 10) ([x] (inc x)) ([x y]) ([x y z & xs] (* x y z))))))

     ;; A single variadic with lots of args works too.
     (is (= [:at-least 4] (f/arity (fn [x y z a & xs] (* x y z a)))))))

(defn illegal? [f]
  (is (thrown? #?(:clj IllegalArgumentException :cljs js/Error)
               (f))))

(deftest joint-arities
  (is (= [:exactly 1] (f/joint-arity [[:exactly 1] [:exactly 1]])))
  (is (= [:exactly 5] (f/joint-arity [[:exactly 5] [:exactly 5]])))
  (is (illegal? #(f/joint-arity [[:exactly 2] [:exactly 1]])))
  (is (illegal? #(f/joint-arity [[:exactly 1] [:exactly 2]])))
  (is (= [:exactly 3] (f/joint-arity [[:exactly 3] [:at-least 2]])))
  (is (= [:exactly 3] (f/joint-arity [[:exactly 3] [:at-least 3]])))
  (is (= [:exactly 3] (f/joint-arity [[:at-least 1] [:exactly 3]])))
  (is (= [:exactly 3] (f/joint-arity [[:at-least 3] [:exactly 3]])))
  (is (illegal? #(f/joint-arity [[:exactly 1] [:at-least 2]])))
  (is (illegal? #(f/joint-arity [[:at-least 2] [:exactly 1]])))
  (is (= [:at-least 3] (f/joint-arity [[:at-least 2] [:at-least 3]])))
  (is (= [:at-least 3] (f/joint-arity [[:at-least 3] [:at-least 2]])))
  (is (= [:between 2 3] (f/joint-arity [[:between 1 3] [:between 2 5]])))
  (is (= [:between 2 3] (f/joint-arity [[:between 2 5] [:between 1 3]])))
  (is (illegal? #(f/joint-arity [[:between 1 3] [:between 4 6]])))
  (is (illegal? #(f/joint-arity [[:between 4 6] [:between 1 3]])))
  (is (= [:exactly 3] (f/joint-arity [[:between 1 3] [:between 3 4]])))
  (is (= [:exactly 3] (f/joint-arity [[:between 3 4] [:between 1 3]])))
  (is (= [:between 2 4] (f/joint-arity [[:at-least 2] [:between 1 4]])))
  (is (= [:between 2 4] (f/joint-arity [[:between 1 4] [:at-least 2]])))
  (is (illegal? #(f/joint-arity [[:at-least 4] [:between 1 3]])))
  (is (illegal? #(f/joint-arity [[:between 1 3] [:at-least 4]])))
  (is (= [:exactly 2] (f/joint-arity [[:exactly 2] [:between 2 3]])))
  (is (= [:exactly 2] (f/joint-arity [[:between 2 3] [:exactly 2]])))
  (is (illegal? #(f/joint-arity [[:between 2 3] [:exactly 1]])))
  (is (illegal? #(f/joint-arity [[:exactly 1] [:between 2 3]]))))

(deftest trig-tests
  (testing "tan, sin, cos"
    (let [f (g/- g/tan (g/div g/sin g/cos))]
      (is (zero? (g/simplify (f 'x))))))

  (testing "sin/asin"
    (let [f (f/compose g/sin g/asin)]
      (is (near 0.5 (f 0.5)))
      (testing "outside real range"
        (is (near 10 (g/magnitude (f 10)))
            "This kicks out a complex number, which doesn't yet compare
          immediately with reals."))))

  (testing "cos/acos"
    (let [f (f/compose g/cos g/acos)]
      (is (near 0.5 (f 0.5)))

      (testing "outside real range"
        (is (near 5 (g/magnitude (f -5)))
            "This kicks out a complex number, which doesn't yet compare
          immediately with reals."))))

  (testing "tan/atan"
    (let [f (f/compose g/tan g/atan)]
      (is (near (/ 0.5 0.2) (f 0.5 0.2))
          "two-arity version!")
      (is (near 0.5 (f 0.5))
          "one-arity version")))

  (testing "cot"
    (let [f (g/- g/cot (g/invert g/tan))]
      (is (zero? (g/simplify (f 'x))))))

  (testing "tanh"
    (let [f (g/- (g/div g/sinh g/cosh) g/tanh)]
      (is (zero?
           (g/simplify (f 'x))))))

  (testing "sec"
    (let [f (g/- (g/invert g/cos) g/sec)]
      (is (zero?
           (g/simplify (f 'x))))))

  (testing "csc"
    (let [f (g/- (g/invert g/sin) g/csc)]
      (is (zero?
           (g/simplify (f 'x))))))

  (testing "sech"
    (let [f (g/- (g/invert g/cosh) g/sech)]
      (is (zero?
           (g/simplify (f 'x))))))

  (testing "cosh"
    (is (near ((g/cosh g/square) 2)
              (g/cosh 4))))

  (testing "sinh"
    (is (near ((g/sinh g/square) 2)
              (g/sinh 4))))

  (testing "acosh"
    (let [f (f/compose g/cosh g/acosh)]
      (is (near 10 (f 10))
          "TODO this can't handle the full generic simplification yet. Sub in
          when we get more rules.")

      (testing "outside real range"
        (is (near 5 (g/magnitude (f -5)))
            "This kicks out a complex number, which doesn't yet compare
          immediately with reals."))))

  (testing "asinh"
    (let [f (f/compose g/sinh g/asinh)]
      (is (near 10 (f 10)))

      (testing "outside real range"
        (is (near 5 (g/magnitude (f -5)))
            "This kicks out a complex number, which doesn't yet compare
          immediately with reals."))))

  (testing "atanh"
    (let [f (f/compose g/tanh g/atanh)]
      (is (near 0.5 (f 0.5)))

      (testing "outside real range"
        (is (near 10 (g/magnitude (f 10)))
            "This kicks out a complex number, which doesn't yet compare
          immediately with reals.")))))

(deftest complex-tests
  (testing "gcd/lcm unit"
    (is (= (g/gcd 10 5)
           (let [deferred (g/gcd (g/+ 1 g/square) 5)]
             (deferred 3))))
    (is (= (g/lcm 10 6)
           (let [deferred (g/lcm (g/+ 1 g/square) 6)]
             (deferred 3))))))

(deftest transpose-test
  (testing "transpose"
    (let [f #(str "f" %)
          g #(str "g" %)]
      (is (= "fg" (f (g ""))))
      (is (= "gf" (((g/transpose f) g) ""))
          "g/transpose for functions returns a fn that takes ANOTHER fn, and
    returns a fn that applies them in reverse order. Like a curried andThen (the
    reverse of compose)"))))

(deftest function-algebra
  (let [add2 (fn [x] (g/+ x 2))
        explog (g/exp g/log)
        mul3 #(* 3 %)]
    (testing "unary"
      (is (= 4 (add2 2)))
      (is (= -4 ((g/- add2) 2)))
      (is (= 9 ((g/sqrt add2) 79)))
      (is (= #sicm/ratio 1/9 ((g/invert add2) 7)))
      (is (= 1.0 (explog 1.0)))
      (is (near 99.0 (explog 99.0)))
      (is (near 20.08553692 ((g/exp add2) 1.0)))
      (is (near 4.718281828 ((add2 g/exp) 1.0))))

    (testing "binary"
      (is (= 12 ((g/+ add2 4) 6)))
      (is (= 14 ((g/+ add2 mul3) 3)))
      (is (= 10 ((g/+ mul3 4) 2)))
      (is (= 32 ((g/expt 2 add2) 3)))
      (is (= 25 ((g/expt add2 2) 3)))
      (is (= ::v/function (v/kind (g/expt add2 2)))))

    (testing "determinant"
      (is (= 20 ((g/determinant *) 4 5))))

    (testing "arity 2"
      (let [f (fn [x y] (+ x y))
            g (fn [x y] (* x y))
            h (g/+ f g)
            k (g/+ 4 (g/- f 2))
            m (g/+ g (g/- f 2))]
        (is (= 11 (h 2 3)))
        (is (= 7 (k 2 3)))
        (is (= 9 (m 2 3)))))

    (testing "arity 0"
      (let [f (fn [] 3)
            g (fn [] 4)
            h (g/+ f g)
            k (g/- f g)
            j (g/* f g)
            q (g/divide f g)]
        (is (= 7 (h)))
        (is (= -1 (k)))
        (is (= 12 (j)))
        (is (= #sicm/ratio 3/4 (q)))))

    (testing "at least 0 arity"
      (let [add (fn [& xs] (reduce + 0 xs))
            mul (fn [& xs] (reduce * 1 xs))
            add+mul (g/+ add mul)
            add-mul (g/- add mul)
            mul-add (g/- mul add)]
        (is (= [:at-least 0] (f/arity add)))
        (is (= [:at-least 0] (f/arity mul)))
        (is (= [:at-least 0] (f/arity add+mul)))
        (is (= 33 (add+mul 2 3 4)))
        (is (= -15 (add-mul 2 3 4)))
        (is (= 15 (mul-add 2 3 4)))))))
